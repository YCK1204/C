// 퀵 정렬

#include <stdio.h>

#define swap(a, b, temp){temp = a; a = b; b = temp;}  // 스왚 함수 구현

void quick_sort(int* target, int start, int end) {
	if (start >= end) return;
	int temp;
	int pivot = start;   // 피벗 선언
	int left = start + 1;
	int right = end;
  
  // left가 right 값보다 작을 때 까지
	while (left <= right) {    
		while (left <= end && target[left] <= target[pivot]) left++; // left값이 피벗 값보다 크지 않다면 큰 값을 찾을 때 까지 ++
		while (right > start && target[right] >= target[pivot]) right--;  // right값이 피벗 값보다 크다면 작은 값을 찾을 때 까지 --
    
    // left가 right 보다 클 때 피벗 값을 right랑 바꾸기
		if (left > right) {
			swap(target[pivot], target[right], temp);
		}
    // left가 right 보다 작거나 같을 때 left값과 right값을 바꾸기
		else {
			swap(target[left], target[right], temp);
		}
		quick_sort(target, start, right - 1);
		quick_sort(target, right + 1, end);
	}
}

int main() {
	int n = 10, temp; 
	int targets[10] = { 7, 5, 9, 0, 3, 1, 6, 2, 4, 8 };
	quick_sort(targets, 0, 9);
	for (int i = 0; i < n; i++) {
		printf("%d ", targets[i]);
	}
	return 0;
}
